<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Roobyz Ramblings]]></title><description><![CDATA[A responsive site for sharing thoughts and lessons learned on data science, programming, and technology.]]></description><link>http://https://roobyz.github.io/#blog</link><image><url>/images/background.jpg</url><title>Roobyz Ramblings</title><link>http://https://roobyz.github.io/#blog</link></image><generator>RSS for Node</generator><lastBuildDate>Thu, 04 May 2017 05:56:24 GMT</lastBuildDate><atom:link href="http://https://roobyz.github.io/#blog/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[PVE: Virtualization for Work and Play (Part 2)]]></title><description><![CDATA[<div class="sect1">
<h2 id="_getting_started">Getting Started&#8230;&#8203;</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In the <a href="/2017/04/23/Server-Virtualization-Management.html">previous post</a>, we learned about ProxMox Virtual Environment (PVE) and outlined the plan to build a powerful "bang for the buck" home server for games <em>and</em> other system-intensive pursuits. Before proceeding, you should feel a little comfortable with the <a href="http://linuxcommand.org/lc3_learning_the_shell.php" target="_blank">Linux CLI (command line interface)</a>. Now let&#8217;s begin.</p>
</div>
<div id="toc" class="toc">
<div id="toctitle" class="title">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="#_getting_started">Getting Started&#8230;&#8203;</a></li>
<li><a href="#_installation">Installation</a>
<ul class="sectlevel2">
<li><a href="#_pve_drive_options">PVE Drive Options</a></li>
<li><a href="#_zfs_partitions">ZFS Partitions</a></li>
<li><a href="#_zfs_setup">ZFS Setup</a></li>
</ul>
</li>
<li><a href="#_post_installation">Post-Installation</a>
<ul class="sectlevel2">
<li><a href="#_adjusting_the_pve_repositories">Adjusting the PVE Repositories</a></li>
<li><a href="#_update_pve">Update PVE</a></li>
<li><a href="#_update_the_pve_storage_system">Update the PVE Storage System:</a></li>
</ul>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_installation">Installation</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The <a href="https://pve.proxmox.com/wiki/Quick_installation" target="_blank">PVE Quick Installation</a> guide does a wonderful job of highlighting the key installation points and showing how simple the process really is. If you follow the defaults settings, PVE will install to <em>local disks</em> and should take about 10 minutes or less. If you have a large single drive that you want to use, then you can skip to the post-installation section below since that guide is all that you would need.</p>
</div>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 10%;">
<col style="width: 80%;">
<col style="width: 10%;">
</colgroup>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>PVE Installation Process
<span class="image"><img src="https://roobyz.github.io/images/Server-Virtualization-Management/pve-installation.gif" alt="pve-install"></span></p>
</div></div></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
<div class="sect2">
<h3 id="_pve_drive_options">PVE Drive Options</h3>
<div class="paragraph">
<p>For our setup, we will disconnect all the drives except for our boot drive, and follow most of the default installation options with one exception. Since we only want to use half of the boot drive (512Gb NVMe) our <em>hard disk options</em> are as follows:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong><code>ext4</code></strong> <em>filesystem</em>: Standard Linux filesystem is the safe bet.</p>
</li>
<li>
<p><strong><code>176.0</code></strong> <em>hdsize</em>: Shooting for half of our 512Gb. The following values should add up to 256Gb. Equal to 256Gb-80Gb (minfree).</p>
</li>
<li>
<p><strong><code>64.0</code></strong> <em>swapsize</em>: Linux swap file size (equal to our ram size). Be sure to set vm.swappiness to a low value if you have your swap file on an SSD! It&#8217;ll increase RAM usage a bit, but will be easier on our SSD.</p>
</li>
<li>
<p><strong><code>96.0</code></strong> <em>maxroot</em>: / root file partition</p>
</li>
<li>
<p><strong><code>80.0</code></strong> <em>minfree</em>: This should equal our ZFS log (16GB) plus our ZFS cache (64GB).</p>
</li>
<li>
<p><strong><code>16.0</code></strong> <em>maxve</em>: This is the pve-data partition.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>When you get to the <em>Installation Successful</em> step of the PVE install, click the "Reboot" button.</p>
</div>
</div>
<div class="sect2">
<h3 id="_zfs_partitions">ZFS Partitions</h3>
<div class="paragraph">
<p>After rebooting you can log in via the PVE Web GUI or through the command line using SSH. Logging in via ssh:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>ssh root@10.10.1.10

#The authenticity of host '10.10.1.10 (10.10.1.10)' can't be established.
#ECDSA key fingerprint is SHA256:2ExP+SHaCo+9ZOt+sk90DPLAafdHFJTHPyeU1qtFXIg.
#Are you sure you want to continue connecting (yes/no)?</code></pre>
</div>
</div>
<div class="paragraph">
<p>Type "yes" and then enter the password set during installation.</p>
</div>
<div class="paragraph">
<p>After logging into our new PVE installation, we want to add two additional partitions (ZFS Log (16Gb), and ZFS Cache(64Gb)). The combined storage will be 256Gb, leaving us with half of our NVMe for other options like dual-boot, additional storage, etc.</p>
</div>
<div class="paragraph">
<p>After logging in, run (update for your drive): <code>cfdisk /dev/sda</code></p>
</div>
<div class="paragraph">
<p>Go down to the "free space" line in green and add a 16Gb partition. Move down again to the next "free space" line in green and add a 64Gb partition. Then select <code>write</code> and then select <code>quit</code> and we are done.</p>
</div>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 10%;">
<col style="width: 80%;">
<col style="width: 10%;">
</colgroup>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>Creating ZFS Log and Cache Partitions
<span class="image"><img src="https://roobyz.github.io/images/Server-Virtualization-Management/pve-cfdisk-process.gif" alt="pve-cfdisk"></span></p>
</div></div></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>Once these two partitions are added, we can shut down PVE from the command line:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>shutdown -h</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_zfs_setup">ZFS Setup</h3>
<div class="paragraph">
<p>Once PVE has shut down, we can reconnect the remaining drives and restart our system. Before setting up our ZFS storage, we must backup any data that we want to keep.</p>
</div>
<div class="paragraph">
<p>Let&#8217;s start our <a href="http://open-zfs.org/wiki/Performance_tuning" target="_blank">ZFS configuration</a>. As mentioned in our previous post, we are configuring ZFS as striped-mirrored storage. Since we have a 2TB spinning disk that we want to use for backup, we will mirror it as an <em>automatic</em> backup.</p>
</div>
<div class="paragraph">
<p>Our drives should all be the same size, otherwise, we will lose storage capacity. Since our SSD drives are 1TB each, we need to partition our 2TB spinning disk to two 1TB partitions. Before partitioning, identify the correct drives; run <code>lsblk</code> to get the list of block devices:</p>
</div>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 10%;">
<col style="width: 80%;">
<col style="width: 10%;">
</colgroup>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>List of block devices
<span class="image"><img src="https://roobyz.github.io/images/Server-Virtualization-Management/pve-lsblk.png" alt="pve-lsblk"></span></p>
</div></div></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>In my example, the 2TB (1.8T) drive is <code>/dev/sdc</code>. The following commands will replace the drive with a new GPT partition table and create the 2 partitions:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code># Install parted
apt-get install parted

# remove everything on the /dev/sdc drive and
# replace with two empty equal-sized partitions
parted /dev/sdc --script mklabel gpt \
       mkpart primary 0% 50% \
       mkpart primary 50% 100% p</code></pre>
</div>
</div>
<div class="paragraph">
<p>After partitioning, we can mirror and stripe the drives. When we create the drive mirrors, ZFS creates virtual devices (vdevs). We can then connect the vdevs together into zpools. For example, we can <em>mirror</em> two 1TB drives and we end up with a 1TB vdev that will automatically replicate our data across both drives. Then we combine the two 1TB mirrored vdevs and end up with 2TB of storage.</p>
</div>
<div class="paragraph">
<p>Since the zpool read/write transactions are balanced across the two vdevs, we can actually get an increase in drive performance with the transactions happening in parallel across two physical drives. We can also compress the read-write transactions on the zpool. Because our CPU can compress-decompress data much faster than the drives can read-write data, our drive performance can improve even more, because of the smaller size of the read-write transactions on the zpool.</p>
</div>
<table class="tableblock frame-all grid-all spread">
<caption class="title">Table 1. Creating our ZFS Storage Pool</caption>
<colgroup>
<col style="width: 50%;">
<col style="width: 50%;">
</colgroup>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><div><div class="ulist">
<ul>
<li>
<p>zpool create -o ashift=12 tank \</p>
</li>
<li>
<p>mirror /dev/sda /dev/sdc1 \</p>
</li>
<li>
<p>mirror /dev/sdb /dev/sdc2 \</p>
</li>
<li>
<p>log   /dev/nvm0n1p4 \</p>
</li>
<li>
<p>cache /dev/nvm0n1p5</p>
</li>
</ul>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="ulist">
<ul>
<li>
<p>pool called tank with 4k sectors</p>
</li>
<li>
<p>first vdev</p>
</li>
<li>
<p>second vdev</p>
</li>
<li>
<p>16GB log partition</p>
</li>
<li>
<p>64GB cache partition</p>
</li>
</ul>
</div></div></td>
</tr>
</tbody>
</table>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>zfs set compression=lz4 tank  # lz4 pool compression
zfs create tank/vm-disks      # ZFS layer to store VM images</code></pre>
</div>
</div>
<div class="paragraph">
<p>Once that&#8217;s done, we can run the following commands:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>zpool list          # verify that our pool has been created
zpool status tank   # check pool status and configuration
pvesm zfsscan       # list available ZFS file systems</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_post_installation">Post-Installation</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The PVE open-source license allows for testing and non-production use. If we would like to use PVE for production or we want commercial support, we can purchase a subscription, enter our key through the web interface, and skip to the "Update PVE" section.</p>
</div>
<div class="sect2">
<h3 id="_adjusting_the_pve_repositories">Adjusting the PVE Repositories</h3>
<div class="paragraph">
<p>The <a href="https://pve.proxmox.com/wiki/Package_Repositories" target="_blank">PVE Package Repositories</a> can be configured depending on your usage goals. Let&#8217;s include the non-commercial list of repositories.</p>
</div>
<div class="paragraph">
<p>Run <code>nano /etc/apt/sources.list</code> and update as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code># main debian repo
deb http://ftp.us.debian.org/debian stretch main contrib

# security updates
deb http://security.debian.org stretch/updates main contrib</code></pre>
</div>
</div>
<div class="paragraph">
<p>Save and exit: press CTRL+X, Y for yes, and ENTER.</p>
</div>
<div class="paragraph">
<p>Comment-out the PVE commercial repository.</p>
</div>
<div class="paragraph">
<p>Run <code>nano /etc/apt/sources.list.d/pve-enterprise.list</code> and update as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code># non-subscription repo (manual update)
deb http://download.proxmox.com/debian/pve stretch pve-no-subscription
#deb https://enterprise.proxmox.com/debian/pve stretch pve-enterprise</code></pre>
</div>
</div>
<div class="paragraph">
<p>Save and exit: press CTRL+X, Y for yes, and ENTER.</p>
</div>
</div>
<div class="sect2">
<h3 id="_update_pve">Update PVE</h3>
<div class="paragraph">
<p>Edit our <em>resume</em> settings: run <code>nano /etc/initramfs-tools/conf.d/resume</code> and add:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>RESUME=none</code></pre>
</div>
</div>
<div class="paragraph">
<p>Save and exit: press CTRL+X, Y for yes, and ENTER.</p>
</div>
<div class="paragraph">
<p>Update the software packages, boot loader, and system image. From the PVE, command line type:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>apt-get update &amp;&amp; apt-get upgrade -y
update-grub
update-initramfs -u</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_update_the_pve_storage_system">Update the PVE Storage System:</h3>
<div class="paragraph">
<p>Once we create our ZFS storage, we can go to the PVE Web GUI and add it to our setup. Being sure to use <em>HTTPS</em>, open <a href="https://machine-ip-address:8006" class="bare">https://machine-ip-address:8006</a> in a web browser. When we get the <em>certificate warning</em> message, we should proceed anyway. This happens because the machine does not have a certificate signed by a third party. Our goal is to end up with four storage volumes:</p>
</div>
<table class="tableblock frame-all grid-all spread">
<caption class="title">Table 2. PVE storage volumes.</caption>
<colgroup>
<col style="width: 27.2727%;">
<col style="width: 72.7273%;">
</colgroup>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><div><div class="olist arabic">
<ol class="arabic">
<li>
<p>vm-disks</p>
</li>
<li>
<p>zfs-backups</p>
</li>
<li>
<p>zfs-containers</p>
</li>
<li>
<p>zfs-templates</p>
</li>
</ol>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="ulist">
<ul>
<li>
<p>Stores RAW disk images more efficiently</p>
</li>
<li>
<p>Stores VZDump backups of virtual machines</p>
</li>
<li>
<p>Stores LXC container filesystems</p>
</li>
<li>
<p>Stores ISOs and container templates</p>
</li>
</ul>
</div></div></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>Once logged in, we go to Datacenter &gt; Storage, and:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>click <strong>Add</strong> &gt; <strong>ZFS</strong>, then enter "<strong><em>vm-disks</em></strong>" for ID, and select <em>tank/vm-disks</em> for pool, choose only <em>Disk Image</em> for content, and finally tick the <em>Thin Provision</em> checkbox and select <strong>Add</strong>.</p>
</li>
<li>
<p>click <strong>Add</strong> &gt; <strong>ZFS</strong>, then enter "<strong><em>zfs-containers</em></strong>" for ID, and select <em>tank</em> for pool, and <em>Container</em> for content, and select <strong>Add</strong>.</p>
</li>
<li>
<p>click <strong>Add</strong> &gt; <strong>Directory</strong>, then enter "<strong><em>zfs-backups</em></strong>" for ID, enter "<em>/tank</em>" (/our-zfs-pool) for directory, and choose only <em>VZDump backup files</em> for content, then select <strong>Add</strong>.</p>
</li>
<li>
<p>click <strong>Add</strong> &gt; <strong>Directory</strong>, then enter "<strong><em>zfs-templates</em></strong>" for ID, enter "<em>/tank</em>" (/our-zfs-pool) for directory, and choose both <em>container templates</em> and <em>ISO images</em> for content, then select <strong>Add</strong>.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>After adding our new storage options, we can disable the local storage:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>select <strong>local-lvm</strong>, click <strong>Edit</strong>, untick the <em>Enable</em> checkbox, and click "OK".</p>
</li>
<li>
<p>select <strong>local</strong>, click <strong>Edit</strong>, untick the <em>Enable</em> checkbox, add "1" for <em>Max Backups</em>, and then click "OK".</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>Afterward, if we select the arrow next to pve in the <em>Server View</em>, we will only see only four enabled storage options.</p>
</div>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 10%;">
<col style="width: 80%;">
<col style="width: 10%;">
</colgroup>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>PVE Storage Volume Setup
<span class="image"><img src="https://roobyz.github.io/images/Server-Virtualization-Management/pve-zfs-setup.gif" alt="pve-zfs-setup"></span></p>
</div></div></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>We made it! With only one storage volume for each type of content, there&#8217;s no way to accidentally misplace something. Creating containers and VMs should function as expected.</p>
</div>
<div class="paragraph">
<p>Our machine is ready to go, however this is only part 2 of our multipart tutorial. Our next installment will cover some opportunities for <em>System Optimization</em>.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Part 3: System Optimization</p>
</li>
</ul>
</div>
</div>
</div>
</div>]]></description><link>http://https://roobyz.github.io/#blog/2017/04/25/Server-Virtualization-Management-Part2.html</link><guid isPermaLink="true">http://https://roobyz.github.io/#blog/2017/04/25/Server-Virtualization-Management-Part2.html</guid><category><![CDATA[Blog]]></category><category><![CDATA[Open_Source]]></category><category><![CDATA[Technology]]></category><category><![CDATA[ProxMox]]></category><dc:creator><![CDATA[Roberto Rivera]]></dc:creator><pubDate>Tue, 25 Apr 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[PVE: Virtualization for Work and Play (Part 1)]]></title><description><![CDATA[<div class="sect1">
<h2 id="_the_plan">The Plan&#8230;&#8203;</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Say we want a powerful "bang for the buck" home server for games <em>and</em> other system-intensive pursuits. We may want to run powerful analytics applications which would undoubtedly require Linux, but we may also want to run Windows applications. We may want near native 2D and 3D graphics performance inside the guest operating system (OS) while making dual-booting obsolete. Finally, we may want to do all of that from the comfort of our couch using a Windows, Linux or Mac laptop. Lets do it!</p>
</div>
<div id="toc" class="toc">
<div id="toctitle" class="title">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="#_the_plan">The Plan&#8230;&#8203;</a></li>
<li><a href="#_introduction">Introduction</a></li>
<li><a href="#_hardware_considerations">Hardware Considerations</a></li>
<li><a href="#_software_considerations">Software Considerations</a></li>
<li><a href="#_next_steps">Next Steps&#8230;&#8203;</a></li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_introduction">Introduction</h2>
<div class="sectionbody">
<div class="paragraph">
<p><a href="https://en.wikipedia.org/wiki/X86_virtualization" target="_blank">Hardware virtualization</a> allows multiple operating systems to simultaneously share processor resources. With the <a href="https://opensource.org/" target="_blank">open source</a> server management solution, <a href="https://www.proxmox.com/en/" target="_blank">Proxmox Virtual Environment (PVE)</a>, we can  leverage hardware virtualization to achieve our goals. PVE enables the creation of multiple virtual OS "servers" via a Web GUI; as many as our hardware setup will allow. This guide will document the setup of PVE on the following hardware:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>AMD Ryzen 7 1600 (8 cores, 16 threads @ 3.7GHz)</p>
</li>
<li>
<p>64GB 2400MHz DDR4</p>
</li>
<li>
<p>Boot Drive: 1x 512GB NVMe SSD</p>
</li>
<li>
<p>Storage (Striped-mirrored ZFS):</p>
<div class="ulist">
<ul>
<li>
<p>2x 1TB SATA SSD (striped)</p>
</li>
<li>
<p>1x 2TB 7200rpm mechanical drives (mirrored)</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>So what&#8217;s the difference between a VM and a container anyway, and how do we choose between them? A VM is computer software that emulates a particular computer hardware system and requires an OS to function. In other words, VMs "pretend" to be an actual computer of the type that <em>we</em> specify and will need to have a Guest OS like Windows or Linux running. Containers are software that emulates the Host OS, to enable software to run predictably.</p>
</div>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 10%;">
<col style="width: 80%;">
<col style="width: 10%;">
</colgroup>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>Diagram 1: Comparison of a VM &amp; Container on One Machine
<span class="image"><img src="https://roobyz.github.io/images/Server-Virtualization-Management/vms-and-containers.png" alt="vms-cnt"></span></p>
</div></div></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>If we want to run multiple applications on one server, to have increased security, or to run an operating system that is different from our host system, then a VM is our choice. To run different versions of an application (i.e RStudio) and validate reproducibility and reliability, then we want to use containers. Compared to VMs, containers are quicker, "lighter weight" and more transient so they can be readily packaged, shared, and moved to other hardware.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_hardware_considerations">Hardware Considerations</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Our CPU and motherboard must support "virtualization” (SVM) and IOMMU, which needs to be enabled in firmware for resource sharing. Also, we should have 32GB of RAM or more, so that we can reserve at least 16GB for a single virtual machine (VM) and still have enough memory left over for PVE and potentially other VMs running simultaneously.</p>
</div>
<div class="paragraph">
<p>While most of our computer hardware can be shared between multiple VMs, the graphics card (GPU) may not readily be shared, so we&#8217;ll need at least two GPUs:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>One GPU for PVE (the host);</p>
</li>
<li>
<p>One powerful GPU for our VMs (the guests: Windows, Linux, etc.).</p>
</li>
</ol>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_software_considerations">Software Considerations</h2>
<div class="sectionbody">
<div class="paragraph">
<p><a href="https://jannikjung.me/proxmox-ve-5-0-beta1/" target="_blank">PVE 5.0</a> is based in <a href="https://wiki.debian.org/DebianStretch" target="_blank">Debian Linux (Stretch)</a>. Since our Ryzen hardware is rather new, our host system needs to have a Linux kernel version 4.10 or later. Although in beta at the time of this writing, PVE 5.0 has better support for Ryzen than PVE 4.4.</p>
</div>
<div class="paragraph">
<p>PVE natively supports both <a href="https://www.linux-kvm.org/page/Main_Page" target="_blank">KVM</a> for hardware virtualization and <a href="https://linuxcontainers.org/lxc/introduction/" target="_blank">LXC containers</a> for Linux system virtualization. Since the guest systems can run under hardware virtualization, we get some added bonuses. For example, we can benefit from Ryzen hardware and still get <a href="http://www.pcworld.com/article/3189990/windows/microsoft-blocks-kaby-lake-and-ryzen-pcs-from-windows-7-81-updates.html" target="_blank">Windows 7 updates</a>. We would need to identify our Windows <a href="https://www.nextofwindows.com/the-best-way-to-uniquely-identify-a-windows-machine" target="_blank">Universally Unique Identifier (UUID)</a> so that it may be identical on our VM. Otherwise, Microsoft may think that we have a new version of Windows that needs to be registered.</p>
</div>
<div class="paragraph">
<p>We will use <a href="https://github.com/zfsonlinux/zfs/wiki/faq" target="_blank">ZFS</a>, a storage platform that encompasses the functionality of traditional filesystems, volume managers, and more, with consistent reliability, and performance. Our ZFS installation will be compressed and striped: our two SSD drives will run in parallel and require less storage space, which improves read/write performance. In addition, our ZFS will be mirrored: our SSD drives will be cloned so that we have a backup in case of drive failure.</p>
</div>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 11.1111%;">
<col style="width: 88.8889%;">
</colgroup>
<tbody>
<tr>
<td class="tableblock halign-center valign-middle"><p class="tableblock"><span class="image"><img src="/images/icons/lightbulb.png" alt="lightbulb.png" width="56"></span></p></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><strong>About That</strong>: KVM supports multiple disk formats; raw images, the native QEMU format (qcow2), VMware format, and many more. When working with ZFS on PVE, we need to use raw images. It may not seem obvious at first, but we can easily convert an existing KVM file from one format to a raw image. Near the end of this guide, we&#8217;ll cover the process to convert a qcow2 format to the required PVE raw image.</p>
</div></div></td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="sect1">
<h2 id="_next_steps">Next Steps&#8230;&#8203;</h2>
<div class="sectionbody">
<div class="paragraph">
<p>This is Part 1 of a multipart tutorial, and a work in progress. As I complete each part, I&#8217;ll update the links. Roughly speaking the next parts are as follows:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="/2017/04/25/Server-Virtualization-Management-Part2.html">Part 2: Getting Started</a></p>
</li>
<li>
<p>Part 3: System Optimization</p>
</li>
</ul>
</div>
</div>
</div>]]></description><link>http://https://roobyz.github.io/#blog/2017/04/23/Server-Virtualization-Management.html</link><guid isPermaLink="true">http://https://roobyz.github.io/#blog/2017/04/23/Server-Virtualization-Management.html</guid><category><![CDATA[Blog]]></category><category><![CDATA[Open_Source]]></category><category><![CDATA[Technology]]></category><category><![CDATA[ProxMox]]></category><dc:creator><![CDATA[Roberto Rivera]]></dc:creator><pubDate>Sun, 23 Apr 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Titanic: Learning Data Science with RStudio]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>So we are aspiring data scientists and want to dip our toes into <a href="http://rmarkdown.rstudio.com/" target="_blank">RStudio</a>. How do we get started? We dive into the into the waters of the <a href="https://www.kaggle.com/c/titanic" target="_blank">Kaggle Titanic "Competition"</a>, of course!</p>
</div>
<div id="toc" class="toc">
<div id="toctitle" class="title">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="#_our_objective">Our Objective</a></li>
<li><a href="#_kaggle_basics">Kaggle Basics</a></li>
<li><a href="#_titanic_history_lesson">Titanic History Lesson</a></li>
<li><a href="#_next_steps">Next Steps&#8230;&#8203;</a></li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_our_objective">Our Objective</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Use this Kaggle exercise to:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>learn to reason and problem solve like a data scientist</p>
</li>
<li>
<p>get somewhat comfortable with RStudio</p>
</li>
<li>
<p>predict whether a passenger would survive the sinking of the <a href="https://en.wikipedia.org/wiki/RMS_Titanic" target="_blank">Titanic</a></p>
</li>
<li>
<p>enter a Kaggle submission file for evaluation</p>
</li>
<li>
<p>have fun!</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_kaggle_basics">Kaggle Basics</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Kaggle is a community of data scientists and a platform for facilitating data science journeys. One way to participate, is by entering data science competitions. Similar to other competitions, Kaggle provides two Titanic datasets containing passenger attributes:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>a <em>training set</em>, complete with the outcome (target) variable for training our predictive model(s)</p>
</li>
<li>
<p>a <em>test set</em>, for predicting the unknown outcome variable based on the passenger attributes provided in both datasets.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>After training and validating our predictive model(s), we can then enter the submission file to Kaggle for evaluation. As we iterate, we can submit more files and assess our progress on the leaderboard. Subtle model improvements can lead to significant leaps on the leaderboard.</p>
</div>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 11.1111%;">
<col style="width: 88.8889%;">
</colgroup>
<tbody>
<tr>
<td class="tableblock halign-center valign-middle"><p class="tableblock"><span class="image"><img src="/images/icons/lightbulb.png" alt="lightbulb.png" width="56"></span></p></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><strong>About That</strong>: Predictive models are trained using attributes (variables), right? How does that work?</p>
</div>
<div class="paragraph">
<p>Some attributes are correlated: as they vary, to some degree other attributes may also vary. Machine learning leverages that interdependence to model the predicted outcomes. For accurate model performance, we need to:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>maximize the number of explanatory variables: those that are correlated with the outcome variable, and</p>
</li>
<li>
<p>compensate for the correlation of explanatory variables to each other (<a href="https://en.wikipedia.org/wiki/Multicollinearity" target="_blank">multicollinearity</a>).</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>In other words, we need to find the fewest quantity of variables that can explain almost everything that is going on with the outcome that we want to predict.</p>
</div></div></td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="sect1">
<h2 id="_titanic_history_lesson">Titanic History Lesson</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The Titanic was a British passenger liner that sank after colliding with an iceberg in the Atlantic on its maiden voyage en route to New York City. It was the largest ship of its time with 10 decks, 8 of which were for passengers.</p>
</div>
<div class="paragraph">
<p>There were 2,224 passengers and crew aboard. Of the 1,317 passengers, there were: 324 in First Class (including some of the wealthiest people of the time), 284 in Second Class, and 709 in Third Class. Of these, 869 (66%) were male and 447 (34%) female. There were 107 children aboard, the largest number of which were in Third Class.</p>
</div>
<div class="paragraph">
<p>The ship had enough lifeboats for about 1,100 people, and more than 1,500 died. Due to the "women and children first" protocol, men were disproportionately left aboard. Also, not all lifeboats were completely filled during the evacuation. The 705 surviving passengers were rescued by the RMS Carpathia around 2 hours after the catastrophe.</p>
</div>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 11.1111%;">
<col style="width: 88.8889%;">
</colgroup>
<tbody>
<tr>
<td class="tableblock halign-center valign-middle"><p class="tableblock"><span class="image"><img src="/images/icons/lightbulb.png" alt="lightbulb.png" width="56"></span></p></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p><strong>About That</strong>: So the different variables like gender and class could influence whether someone survived, correct?</p>
</div>
<div class="paragraph">
<p>Yes, for example, someone may not have been able to get to the lifeboats because they were in a lower deck, which is correlated with third class. Also, children were disporptionately in third class, but they were also impacted by the "children first" protocol.</p>
</div></div></td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="sect1">
<h2 id="_next_steps">Next Steps&#8230;&#8203;</h2>
<div class="sectionbody">
<div class="paragraph">
<p>We&#8217;ll approach this in multiple parts. This is still a work in progress, but roughly speaking it should look like:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Part 1: Basic Setup</p>
</li>
<li>
<p>Part 2: Feature Engineering</p>
</li>
<li>
<p>Part 3: Prediction</p>
</li>
<li>
<p>Part 4: Conclusion</p>
</li>
</ul>
</div>
</div>
</div>]]></description><link>http://https://roobyz.github.io/#blog/2017/04/16/Predict-Survival-Propensity-of-Titanic-Passengers.html</link><guid isPermaLink="true">http://https://roobyz.github.io/#blog/2017/04/16/Predict-Survival-Propensity-of-Titanic-Passengers.html</guid><category><![CDATA[Blog]]></category><category><![CDATA[Open_Source]]></category><category><![CDATA[Machine_Learning]]></category><category><![CDATA[Analytics]]></category><category><![CDATA[Data_Science]]></category><dc:creator><![CDATA[Roberto Rivera]]></dc:creator><pubDate>Sun, 16 Apr 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Qualitative Prediction of Weight-Lifting Exercises]]></title><description><![CDATA[<div class="paragraph">
<p>One day your company tells your team that they should switch from a proprietary analytics platform like <a href="https://www.sas.com/" target="_blank">SAS</a>, to something <a href="https://opensource.org/" target="_blank">open source</a> like <a href="http://rmarkdown.rstudio.com/" target="_blank">RStudio</a>. Undoubtedly some analysts may become fascinated, while others anxious. How would you get them excited about the switch?</p>
</div>
<div class="paragraph">
<p>My approach was to demonstrate the potential of the new open source platform. How easily could RStudio generate reproducible research and facilitate story telling with data? How could we weave together narrative text and code to seamlessly produce and deliver elegantly formatted analyses to multiple audiences?</p>
</div>
<div class="paragraph">
<p>Leveraging Human Activity Recognition (HAR) data provided from a <a href="http://groupware.les.inf.puc-rio.br/har#ixzz3de67BWZU" target="_blank">Groupware@LES</a> study, a machine learning use-case was born. HAR data has become ubiquitous with the advent of devices like the Fitbit, Nike FuelBand, and even smartphones. Although users of these devices tend to quantify how much they participate in an activity, they rarely consider how <em>well</em> they perform the activity.</p>
</div>
<div class="paragraph">
<p>The provided multiclass variable was generated by participants wearing HAR devices, and is relatively balanced (equally distributed). This simplifies the analysis somewhat since we don&#8217;t need to consider tactics to combat <a href="http://machinelearningmastery.com/tactics-to-combat-imbalanced-classes-in-your-machine-learning-dataset/" target="_blank">imbalanced classes</a>. In addition, this lets us focus primarily on the other major analytics steps required in most machine learning projects.</p>
</div>
<div class="paragraph">
<p>Machine learning project goals:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>use the multiclass variable to build a predictor that distinguishes between participants that correctly completed fitness exercises versus those that hadn’t and what their mistakes may have been.</p>
</li>
<li>
<p>demonstrate the feasibility of using RStudio for delivering reproducible research via a webpage.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The <a href="https://cdn.rawgit.com/roobyz/PredictiveML/c0297e0d771e39633436b3cff87707f0c5f4b851/ml_activity_success.html" target="_blank">project results</a>, and <a href="https://raw.githubusercontent.com/roobyz/PredictiveML/master/ml_activity_success.Rmd" target="_blank">code</a> are available on my <a href="https://github.com/roobyz/PredictiveML" target="_blank">GitHub Repository</a>.</p>
</div>]]></description><link>http://https://roobyz.github.io/#blog/2017/04/15/Identifying-the-Successful-Completion-of-Weight-Lifting-Exercises.html</link><guid isPermaLink="true">http://https://roobyz.github.io/#blog/2017/04/15/Identifying-the-Successful-Completion-of-Weight-Lifting-Exercises.html</guid><category><![CDATA[Blog]]></category><category><![CDATA[Open_Source]]></category><category><![CDATA[Machine_Learning]]></category><category><![CDATA[Analytics]]></category><category><![CDATA[Data_Science]]></category><dc:creator><![CDATA[Roberto Rivera]]></dc:creator><pubDate>Sat, 15 Apr 2017 00:00:00 GMT</pubDate></item></channel></rss>